#!/usr/bin/env python3
"""
AI PC Autopilot - –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö —á–µ—Ä–µ–∑ LLM
–í–µ—Ä—Å–∏—è: 2.2
–û–ø–∏—Å–∞–Ω–∏–µ: –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –≤ Linux –∫–æ–Ω—Å–æ–ª–∏
–ê–≤—Ç–æ—Ä: [Your Name]
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: llama-cpp-python, json, subprocess
"""

import json
import os
import re
import subprocess
import sys
import time
import argparse
import threading
from enum import Enum
from typing import List, Dict, Any, Optional
from pathlib import Path

try:
    from llama_cpp import Llama
    LLAMA_AVAILABLE = True
except ImportError:
    LLAMA_AVAILABLE = False
    print("‚ö† llama-cpp-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install llama-cpp-python")


# ===========================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ===========================================================================

class AppConfig:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    VERSION = "2.2.0"
    DEFAULT_CONFIG_PATH = "config.json"
    DEFAULT_MODELS_DIR = "./models"
    DEFAULT_DATA_DIR = "./data"
    
    def __init__(self, config_path: Optional[str] = None):
        self.config_data = self._load_config(config_path or self.DEFAULT_CONFIG_PATH)
        
        # LLM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.model_path = self.config_data.get('model_path', '')
        self.models_dir = self.config_data.get('models_dir', self.DEFAULT_MODELS_DIR)
        self.max_tokens = self.config_data.get('max_tokens', 2048)
        self.temperature = self.config_data.get('temperature', 0.5)
        self.n_ctx = self.config_data.get('n_ctx', 8192)
        self.n_gpu_layers = self.config_data.get('n_gpu_layers', 0)
        self.enable_self_read = self.config_data.get('enable_self_read', False)
        self.command_timeout = self.config_data.get('command_timeout', 30)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.n_batch = self.config_data.get('n_batch', 512)
        self.seed = self.config_data.get('seed', -1)
        self.top_k = self.config_data.get('top_k', 40)
        self.top_p = self.config_data.get('top_p', 0.95)
        self.repeat_penalty = self.config_data.get('repeat_penalty', 1.0)
        self.verbose = self.config_data.get('verbose', False)
        
        # –§–∏–ª—å—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π
        self.model_whitelist = self.config_data.get('model_whitelist', [])
        self.model_blacklist = self.config_data.get('model_blacklist', [])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª–µ–π
        self.enable_web_search = self.config_data.get('enable_web_search', False)
        self.data_dir = self.config_data.get('data_dir', self.DEFAULT_DATA_DIR)
        
        # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        self.generation_timeout = self.config_data.get('generation_timeout', 300)  # 5 –º–∏–Ω—É—Ç
        self.max_retries = self.config_data.get('max_retries', 3)
        
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return {}
        return {}
    
    def save_config(self, config_path: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ JSON —Ñ–∞–π–ª"""
        path = config_path or self.DEFAULT_CONFIG_PATH
        config_dict = {
            'model_path': self.model_path,
            'models_dir': self.models_dir,
            'max_tokens': self.max_tokens,
            'temperature': self.temperature,
            'n_ctx': self.n_ctx,
            'n_gpu_layers': self.n_gpu_layers,
            'enable_self_read': self.enable_self_read,
            'command_timeout': self.command_timeout,
            'n_batch': self.n_batch,
            'seed': self.seed,
            'top_k': self.top_k,
            'top_p': self.top_p,
            'repeat_penalty': self.repeat_penalty,
            'verbose': self.verbose,
            'model_whitelist': self.model_whitelist,
            'model_blacklist': self.model_blacklist,
            'enable_web_search': self.enable_web_search,
            'data_dir': self.data_dir,
            'generation_timeout': self.generation_timeout,
            'max_retries': self.max_retries
        }
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(config_dict, f, indent=2, ensure_ascii=False)
        print(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {path}")


# ===========================================================================
# –ú–û–î–£–õ–¨: –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ü–õ–ê–ù–û–í
# ===========================================================================

class PlanLogger:
    """–ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –ø–ª–∞–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    MODULE_NAME = "Plan Logger"
    MODULE_VERSION = "1.0.0"
    MODULE_DESCRIPTION = "–ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö –ø–ª–∞–Ω–æ–≤"
    
    def __init__(self, data_dir: str = "./data"):
        self.data_dir = data_dir
        self._ensure_data_dir()
        
    def _ensure_data_dir(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir, exist_ok=True)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤: {self.data_dir}")
    
    def log_prompt(self, prompt: str, mode: str, model_paths: List[str]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        log_entry = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "type": "prompt",
            "mode": mode,
            "prompt": prompt,
            "models": [os.path.basename(path) for path in model_paths],
            "models_count": len(model_paths)
        }
        
        self._save_log_entry(log_entry, "prompt")
    
    def log_successful_plan(self, prompt: str, plan: List[Dict]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        log_entry = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "type": "successful_plan",
            "prompt": prompt,
            "plan": plan,
            "actions_count": len(plan),
            "status": "success"
        }
        
        self._save_log_entry(log_entry, "plan")
    
    def log_failed_plan(self, prompt: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        log_entry = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "type": "failed_plan",
            "prompt": prompt,
            "status": "failed"
        }
        
        self._save_log_entry(log_entry, "plan")
    
    def log_execution_result(self, prompt: str, plan: List[Dict], results: List[Dict]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
        success_count = sum(1 for r in results if r.get('success', False))
        
        log_entry = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "type": "execution_result",
            "prompt": prompt,
            "plan": plan,
            "execution_results": results,
            "success_count": success_count,
            "total_actions": len(plan),
            "success_rate": success_count / len(plan) if plan else 0
        }
        
        self._save_log_entry(log_entry, "execution")
    
    def _save_log_entry(self, log_entry: Dict, log_type: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"{log_type}_{timestamp}_{hash(log_entry['prompt'][:50]) % 10000:04d}.json"
            filepath = os.path.join(self.data_dir, filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(log_entry, f, indent=2, ensure_ascii=False, default=str)
            
            print(f"üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
    
    def get_recent_logs(self, log_type: str = None, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
        try:
            logs = []
            for filename in os.listdir(self.data_dir):
                if log_type and not filename.startswith(log_type):
                    continue
                    
                filepath = os.path.join(self.data_dir, filename)
                if os.path.isfile(filepath) and filename.endswith('.json'):
                    with open(filepath, 'r', encoding='utf-8') as f:
                        log_entry = json.load(f)
                        logs.append(log_entry)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            logs.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
            return logs[:limit]
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []


# ===========================================================================
# –ú–û–î–£–õ–¨: LLM (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏)
# ===========================================================================

class ModelScanner:
    """–°–∫–∞–Ω–µ—Ä –∏ —Ñ–∏–ª—å—Ç—Ä –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, models_dir: str, extension: str = ".gguf"):
        self.models_dir = models_dir
        self.extension = extension
        
    def scan_models(self) -> List[str]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π"""
        models = []
        if not os.path.exists(self.models_dir):
            print(f"‚ö† –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.models_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return models
            
        for item in os.listdir(self.models_dir):
            item_path = os.path.join(self.models_dir, item)
            if os.path.isfile(item_path) and item.endswith(self.extension):
                models.append(item_path)
        return models
    
    def filter_models(self, models: List[str], whitelist: List[str], 
                     blacklist: List[str]) -> List[str]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ –±–µ–ª–æ–º—É –∏ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É"""
        filtered = []
        
        for model_path in models:
            model_name = os.path.basename(model_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if any(pattern in model_name for pattern in blacklist):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ–π)
            if whitelist and not any(pattern in model_name for pattern in whitelist):
                continue
                
            filtered.append(model_path)
            
        return filtered


class LLMManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–Ω–æ–π LLM –º–æ–¥–µ–ª—å—é"""
    
    MODULE_NAME = "LLM Manager"
    MODULE_VERSION = "1.1.0"
    MODULE_DESCRIPTION = "–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏"
    
    def __init__(self, model_path: str, config: AppConfig):
        self.config = config
        self.model_path = model_path
        self.llm = None
        self.is_initialized = False
        self._generation_timeout = config.generation_timeout
        
    def initialize_llm(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –º–æ–¥–µ–ª–∏"""
        if not LLAMA_AVAILABLE:
            print("‚ùå llama-cpp-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
        try:
            if not os.path.exists(self.model_path):
                print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.model_path}")
                return False
                
            print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {os.path.basename(self.model_path)}...")
            self.llm = Llama(
                model_path=self.model_path,
                n_ctx=self.config.n_ctx,
                n_gpu_layers=self.config.n_gpu_layers,
                n_batch=self.config.n_batch,
                seed=self.config.seed,
                verbose=self.config.verbose
            )
            self.is_initialized = True
            print(f"‚úì –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(self.model_path)}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.is_initialized = False
            return False
    
    def _generate_with_timeout(self, prompt: str, max_tokens: Optional[int] = None,
                              temperature: Optional[float] = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        result = {"error": "–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"}
        
        def generate():
            nonlocal result
            try:
                result = self.llm(
                    prompt,
                    max_tokens=max_tokens or self.config.max_tokens,
                    temperature=temperature or self.config.temperature,
                    top_k=self.config.top_k,
                    top_p=self.config.top_p,
                    repeat_penalty=self.config.repeat_penalty,
                    echo=False
                )
            except Exception as e:
                result = {"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"}
        
        thread = threading.Thread(target=generate)
        thread.start()
        thread.join(timeout=self._generation_timeout)
        
        if thread.is_alive():
            print(f"‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({self._generation_timeout} —Å–µ–∫), –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ...")
            return {"error": f"–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({self._generation_timeout} —Å–µ–∫—É–Ω–¥)"}
            
        return result
    
    def generate_response(self, prompt: str, max_tokens: Optional[int] = None,
                         temperature: Optional[float] = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        if not self.is_available():
            return {"error": "–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}
            
        try:
            return self._generate_with_timeout(prompt, max_tokens, temperature)
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"}
    
    def generate_plan(self, system_prompt: str, user_request: str) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        full_prompt = f"{system_prompt}\n\nUser request: {user_request}\n\nAnswer (JSON):"
        
        for attempt in range(self.config.max_retries):
            print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ {attempt + 1}/{self.config.max_retries}...")
            
            response = self.generate_response(full_prompt)
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {response['error']}")
                if attempt < self.config.max_retries - 1:
                    time.sleep(2)
                continue
                
            try:
                response_text = response['choices'][0]['text']
                plan = PlanParser.parse_plan(response_text)
                if plan:
                    return plan
                else:
                    print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–ª–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–∞–Ω–∞: {e}")
            
            if attempt < self.config.max_retries - 1:
                time.sleep(2)
        
        print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ")
        return None
    
    def self_reflect(self, initial_prompt: str, initial_response: str) -> str:
        """–°–∞–º–æ–∞–Ω–∞–ª–∏–∑: –º–æ–¥–µ–ª—å —á–∏—Ç–∞–µ—Ç —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –µ–≥–æ"""
        reflection_prompt = f"""Original request: {initial_prompt}

Original response: {initial_response}

Review this response and provide an improved version, correcting errors and adding information."""
        
        response = self.generate_response(reflection_prompt)
        if "error" not in response:
            return response['choices'][0]['text']
        return initial_response
    
    def unload_llm(self):
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏"""
        if self.llm:
            del self.llm
            self.llm = None
            self.is_initialized = False
            import gc
            gc.collect()
            print(f"‚úì –ú–æ–¥–µ–ª—å –≤—ã–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(self.model_path)}")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        return self.is_initialized and self.llm is not None


class MultiModelManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    
    def __init__(self, paths_to_models: List[str], config: AppConfig):
        self.config = config
        self.paths_to_models = paths_to_models
        self.llms_for_use: List[LLMManager] = []
        
    def initialize_multiple_llms(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π"""
        if not self.paths_to_models:
            print("‚ùå –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç")
            return False
            
        success = True
        for model_path in self.paths_to_models:
            llm = LLMManager(model_path, self.config)
            if llm.initialize_llm():
                self.llms_for_use.append(llm)
            else:
                success = False
        
        if not self.llms_for_use:
            print("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return False
            
        return success
    
    def generate_multiple_responses(self, prompt: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        responses = {}
        for llm in self.llms_for_use:
            model_name = os.path.basename(llm.model_path)
            response = llm.generate_response(prompt)
            responses[model_name] = response
        return responses
    
    def unload_multiple_llms(self):
        """–í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        for llm in self.llms_for_use:
            llm.unload_llm()
        self.llms_for_use.clear()
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        return len(self.llms_for_use) > 0 and any(llm.is_available() for llm in self.llms_for_use)


class ModelRole(Enum):
    """–†–æ–ª–∏ –º–æ–¥–µ–ª–µ–π –≤ –∞–Ω—Å–∞–º–±–ª–µ"""
    SPECIALIST = "specialist"   # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ
    PLANNER = "planner"         # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    CRITIC = "critic"           # –ö—Ä–∏—Ç–∏–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫
    EXECUTOR = "executor"       # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    SYNTHESIZER = "synthesizer" # –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤


class ModelOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, paths_to_models: List[str], config: AppConfig):
        self.config = config
        self.paths_to_models = paths_to_models
        self.model_roles: Dict[str, ModelRole] = {}
        
    def assign_role(self, model_path: str, role: ModelRole):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –º–æ–¥–µ–ª–∏"""
        self.model_roles[model_path] = role
    
    def llms_cross_thinking(self, prompt: str, iterations: int = 2) -> str:
        """–ö—Ä–æ—Å—Å-–º—ã—à–ª–µ–Ω–∏–µ: –º–æ–¥–µ–ª–∏ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ —É–ª—É—á—à–∞—é—Ç –∏—Ö"""
        accumulated_responses = []
        current_prompt = prompt
        
        for i in range(iterations):
            print(f"\n‚è≥ –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            responses = {}
            for model_path in self.paths_to_models:
                llm = LLMManager(model_path, self.config)
                if llm.initialize_llm():
                    response = llm.generate_response(current_prompt)
                    model_name = os.path.basename(model_path)
                    if "error" not in response:
                        responses[model_name] = response['choices'][0]['text']
                    llm.unload_llm()
            
            accumulated_responses.append(responses)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if i < iterations - 1 and responses:
                responses_text = "\n\n".join([
                    f"Model {model}: {resp[:500]}..." 
                    for model, resp in responses.items()
                ])
                current_prompt = f"{prompt}\n\nPrevious answer options:\n{responses_text}\n\nImprove your answer considering these options:"
        
        return self._synthesize_best_response(accumulated_responses)
    
    def _synthesize_best_response(self, all_responses: List[Dict[str, str]]) -> str:
        """–°–∏–Ω—Ç–µ–∑ –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –≤—Å–µ—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π"""
        if all_responses:
            last_iteration = all_responses[-1]
            if last_iteration:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É)
                return max(last_iteration.values(), key=len)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"


# ===========================================================================
# –ú–û–î–£–õ–¨: –ü–õ–ê–ù–ò–†–û–í–©–ò–ö / –°–û–ë–ò–†–ê–¢–ï–õ–¨ –î–ê–ù–ù–´–•
# ===========================================================================

class SystemDataCollector:
    """–°–±–æ—Ä—â–∏–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    MODULE_NAME = "System Data Collector"
    MODULE_VERSION = "1.1.0"
    MODULE_DESCRIPTION = "–ú–æ–¥—É–ª—å —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    
    @staticmethod
    def collect_system_info() -> Dict[str, Any]:
        """–°–±–æ—Ä –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        info = {
            "os": sys.platform,
            "cwd": os.getcwd(),
            "user": os.getenv("USER", "unknown"),
            "home": os.getenv("HOME", "unknown"),
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
        try:
            info["hostname"] = subprocess.check_output(
                ["hostname"], timeout=5
            ).decode().strip()
        except:
            info["hostname"] = "unknown"
            
        return info
    
    @staticmethod
    def generate_system_prompt(config: AppConfig) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
        sys_info = SystemDataCollector.collect_system_info()
        
        prompt = f"""You are a Linux system automation assistant running on:
- OS: {sys_info['os']}
- Hostname: {sys_info['hostname']}
- User: {sys_info['user']}
- Working Directory: {sys_info['cwd']}
- Time: {sys_info['timestamp']}

You create step-by-step plans to accomplish user tasks using terminal commands.

## AVAILABLE COMMANDS

**system_command**: Execute simple system command (safer, no shell)
  Parameters: command (str or list), timeout (int), cwd (str)
  Example: {{"event": "system_command", "data": {{"command": ["ls", "-la"]}}}}

**system_shell**: Execute shell command (supports pipes/redirects)
  Parameters: command (str), timeout (int), cwd (str)
  Example: {{"event": "system_shell", "data": {{"command": "echo 'test' | grep t"}}}}

**file_write**: Write content to file
  Parameters: path (str), content (str), append (bool)
  Example: {{"event": "file_write", "data": {{"path": "/tmp/test.txt", "content": "Hello"}}}}

**file_read**: Read file content
  Parameters: path (str), encoding (str)
  Example: {{"event": "file_read", "data": {{"path": "/tmp/test.txt"}}}}

**open_terminal**: Open new terminal and execute command
  Parameters: command (str), terminal (str) - optional terminal type
  Example: {{"event": "open_terminal", "data": {{"command": "python3 script.py"}}}}

## IMPORTANT INSTRUCTIONS

1. For system updates, use single command: "sudo apt update && sudo apt upgrade -y"
2. For creating scripts, first create file, then make executable, then run
3. Use "open_terminal" when user specifically requests new terminal window
4. Combine related commands where possible to reduce steps
5. Always use absolute paths for file operations

## RESPONSE FORMAT

Respond with JSON array of actions:
[
  {{"event": "system_command", "data": {{"command": ["ls", "-la"]}}, "description": "List files"}},
  {{"event": "file_read", "data": {{"path": "/tmp/test.txt"}}, "description": "Read test file"}}
]

IMPORTANT: Respond ONLY with valid JSON array, no markdown, no extra text."""
        
        return prompt


class PlanParser:
    """–ü–∞—Ä—Å–µ—Ä –ø–ª–∞–Ω–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ LLM"""
    
    @staticmethod
    def parse_plan(response_text: str) -> Optional[List[Dict]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            json_text = PlanParser.extract_json_from_text(response_text)
            if json_text:
                plan = json.loads(json_text)
                if PlanParser.validate_plan(plan):
                    return plan
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON
            fixed_json = PlanParser.try_fix_json(response_text)
            if fixed_json:
                try:
                    plan = json.loads(fixed_json)
                    if PlanParser.validate_plan(plan):
                        print("‚úì JSON –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                        return plan
                except:
                    pass
            return None
    
    @staticmethod
    def validate_plan(plan: Any) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞"""
        if not isinstance(plan, list):
            return False
        
        for action in plan:
            if not isinstance(action, dict):
                return False
            if 'event' not in action or 'data' not in action:
                return False
        
        return True
    
    @staticmethod
    def extract_json_from_text(text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —ç–≤—Ä–∏—Å—Ç–∏–∫–æ–π"""
        # –£–¥–∞–ª–µ–Ω–∏–µ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = text.replace('```json', '').replace('```', '')
        
        # –ü–æ–∏—Å–∫ JSON –º–∞—Å—Å–∏–≤–∞
        start = text.find('[')
        if start == -1:
            return None
            
        # –ü–æ–∏—Å–∫ –ø–∞—Ä–Ω–æ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        bracket_count = 0
        end = -1
        
        for i, char in enumerate(text[start:]):
            if char == '[':
                bracket_count += 1
            elif char == ']':
                bracket_count -= 1
                if bracket_count == 0:
                    end = start + i + 1
                    break
        
        if end > start:
            return text[start:end]
        
        return None
    
    @staticmethod
    def try_fix_json(text: str) -> Optional[str]:
        """–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ JSON"""
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–æ –∏ –ø–æ—Å–ª–µ JSON
        start = text.find('[')
        end = text.rfind(']') + 1
        
        if start == -1 or end == 0:
            return None
            
        json_candidate = text[start:end]
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        fixes = [
            (r',\s*]', ']'),  # –õ–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
            (r',\s*}', '}'),  # –õ–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
            (r'(\w+):', r'"\1":'),  # –ö–ª—é—á–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        ]
        
        for pattern, replacement in fixes:
            json_candidate = re.sub(pattern, replacement, json_candidate)
            
        return json_candidate


# ===========================================================================
# –ú–û–î–£–õ–¨: –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î
# ===========================================================================

class CommandExecutor:
    """–ú–æ–¥—É–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    MODULE_NAME = "Command Executor"
    MODULE_VERSION = "1.1.0"
    MODULE_DESCRIPTION = "–ú–æ–¥—É–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
    
    def __init__(self, config: AppConfig):
        self.config = config
        self.execution_log = []
    
    def execute_plan(self, plan: List[Dict]) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        results = []
        
        for i, action in enumerate(plan, 1):
            print(f"\n[{i}/{len(plan)}] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {action.get('description', 'No description')}")
            result = self.execute_action(action)
            results.append(result)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.execution_log.append({
                'action': action,
                'result': result,
                'timestamp': time.time()
            })
            
            # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            if not result.get('success', False) and result.get('critical', False):
                print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
                break
        
        return results
    
    def execute_action(self, action: Dict) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        event = action.get('event')
        data = action.get('data', {})
        
        print(f"   üîß –ö–æ–º–∞–Ω–¥–∞: {event}")
        if self.config.verbose:
            print(f"   üìã –î–∞–Ω–Ω—ã–µ: {data}")
        
        if event == 'system_command':
            return self._execute_system_command(data)
        elif event == 'system_shell':
            return self._execute_shell_command(data)
        elif event == 'file_write':
            return self._execute_file_write(data)
        elif event == 'file_read':
            return self._execute_file_read(data)
        elif event == 'open_terminal':
            return self._execute_open_terminal(data)
        else:
            error_msg = f"Unknown event: {event}"
            print(f"   ‚ùå {error_msg}")
            return {"success": False, "error": error_msg}
    
    def _execute_system_command(self, data: Dict) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            command = data.get('command', [])
            timeout = data.get('timeout', self.config.command_timeout)
            cwd = data.get('cwd', None)
            
            print(f"   üíª –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}")
            
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=cwd
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            if result.stdout:
                print(f"   üì§ stdout: {result.stdout[:500]}" + ("..." if len(result.stdout) > 500 else ""))
            if result.stderr:
                print(f"   üì• stderr: {result.stderr[:500]}" + ("..." if len(result.stderr) > 500 else ""))
            
            success = result.returncode == 0
            status = "‚úì –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
            print(f"   {status} (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode})")
            
            return {
                "success": success,
                "returncode": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr
            }
        except Exception as e:
            error_msg = str(e)
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {error_msg}")
            return {"success": False, "error": error_msg}
    
    def _execute_shell_command(self, data: Dict) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shell –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            command = data.get('command', '')
            timeout = data.get('timeout', self.config.command_timeout)
            cwd = data.get('cwd', None)
            
            print(f"   üíª –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}")
            
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=cwd
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            if result.stdout:
                print(f"   üì§ stdout: {result.stdout[:500]}" + ("..." if len(result.stdout) > 500 else ""))
            if result.stderr:
                print(f"   üì• stderr: {result.stderr[:500]}" + ("..." if len(result.stderr) > 500 else ""))
            
            success = result.returncode == 0
            status = "‚úì –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
            print(f"   {status} (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode})")
            
            return {
                "success": success,
                "returncode": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr
            }
        except Exception as e:
            error_msg = str(e)
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {error_msg}")
            return {"success": False, "error": error_msg}
    
    def _execute_open_terminal(self, data: Dict) -> Dict[str, Any]:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã"""
        try:
            command = data.get('command', '')
            terminal = data.get('terminal', 'gnome-terminal')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é GNOME Terminal
            
            print(f"   üñ•Ô∏è  –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {terminal}")
            print(f"   üíª –ö–æ–º–∞–Ω–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: {command}")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            if terminal == 'gnome-terminal':
                terminal_cmd = ['gnome-terminal', '--', 'bash', '-c', f"{command}; exec bash"]
            else:
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
                terminal_cmd = [terminal, '-e', f"bash -c '{command}; exec bash'"]
            
            result = subprocess.run(
                terminal_cmd,
                capture_output=True,
                text=True,
                timeout=30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            )
            
            success = result.returncode == 0
            status = "‚úì –¢–µ—Ä–º–∏–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç" if success else "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"
            print(f"   {status} (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode})")
            
            return {
                "success": True,  # –í—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è
                "returncode": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "note": "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞)"
            }
        except Exception as e:
            error_msg = str(e)
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {error_msg}")
            return {"success": False, "error": error_msg}
    
    def _execute_file_write(self, data: Dict) -> Dict[str, Any]:
        """–ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª"""
        try:
            path = data.get('path')
            content = data.get('content', '')
            append = data.get('append', False)
            
            print(f"   üìù –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {path}")
            if self.config.verbose:
                print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:200]}" + ("..." if len(content) > 200 else ""))
            
            mode = 'a' if append else 'w'
            with open(path, mode, encoding='utf-8') as f:
                f.write(content)
            
            print("   ‚úì –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω")
            return {"success": True, "message": f"File written: {path}"}
        except Exception as e:
            error_msg = str(e)
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {error_msg}")
            return {"success": False, "error": error_msg}
    
    def _execute_file_read(self, data: Dict) -> Dict[str, Any]:
        """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            path = data.get('path')
            encoding = data.get('encoding', 'utf-8')
            
            print(f"   üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {path}")
            
            with open(path, 'r', encoding=encoding) as f:
                content = f.read()
            
            print(f"   ‚úì –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return {"success": True, "content": content}
        except Exception as e:
            error_msg = str(e)
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {error_msg}")
            return {"success": False, "error": error_msg}


# ===========================================================================
# –ú–û–î–£–õ–¨: –£–ü–†–ê–í–õ–ï–ù–ò–ï (–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
# ===========================================================================

class ControlModule:
    """–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã"""
    
    MODULE_NAME = "Control Module"
    MODULE_VERSION = "1.2.0"
    MODULE_DESCRIPTION = "–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π —Ä–µ–∂–∏–º–æ–≤"
    
    def __init__(self, config: AppConfig, model_paths: List[str]):
        self.config = config
        self.model_paths = model_paths  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
        self.current_plan = None
        self.llm_manager = None
        self.executor = CommandExecutor(config)
        self.current_mode = "single"
        self.cross_iterations = 2
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = PlanLogger(config.data_dir)

    def show_info(self, module_name: Optional[str] = None):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –∏–ª–∏ –º–æ–¥—É–ª–µ"""
        if module_name:
            modules = {
                'llm': (LLMManager.MODULE_NAME, LLMManager.MODULE_VERSION, LLMManager.MODULE_DESCRIPTION),
                'collector': (SystemDataCollector.MODULE_NAME, SystemDataCollector.MODULE_VERSION, SystemDataCollector.MODULE_DESCRIPTION),
                'executor': (CommandExecutor.MODULE_NAME, CommandExecutor.MODULE_VERSION, CommandExecutor.MODULE_DESCRIPTION),
                'control': (ControlModule.MODULE_NAME, ControlModule.MODULE_VERSION, ControlModule.MODULE_DESCRIPTION),
                'logger': (PlanLogger.MODULE_NAME, PlanLogger.MODULE_VERSION, PlanLogger.MODULE_DESCRIPTION)
            }
            if module_name in modules:
                name, version, desc = modules[module_name]
                print(f"\nüì¶ –ú–æ–¥—É–ª—å: {name}")
                print(f"   –í–µ—Ä—Å–∏—è: {version}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
            else:
                print(f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  /plan <task>       - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏")
            print("  /show              - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω")
            print("  /show -d           - –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
            print("  /execute           - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω")
            print("  /mode              - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
            print("  /mode <single|multi|cross> [iterations] - –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")
            print("  /models            - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
            print("  /logs              - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏")
            print("  /logs <type>       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞")
            print("  /info              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
            print("  /info <module>     - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ")
            print("  /exit              - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    def show_models(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º"""
        print(f"\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ({len(self.model_paths)}):")
        for i, path in enumerate(self.model_paths, 1):
            current_indicator = ""
            if self.current_mode == "single" and i == 1:
                current_indicator = " (—Ç–µ–∫—É—â–∞—è –¥–ª—è single)"
            elif self.current_mode in ["multi", "cross"]:
                current_indicator = " (–∞–∫—Ç–∏–≤–Ω–∞)"
            print(f"  {i}. {os.path.basename(path)}{current_indicator}")
        
        print(f"\nüìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {self.current_mode}")
        if self.current_mode == "cross":
            print(f"   –ò—Ç–µ—Ä–∞—Ü–∏–π: {self.cross_iterations}")
        if self.current_mode in ["multi", "cross"]:
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª–µ–π: {len(self.model_paths)}")
    
    def change_mode(self, mode: str, iterations: Optional[int] = None):
        """–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
        if mode not in ["single", "multi", "cross"]:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ: single, multi, cross")
            return
        
        self.current_mode = mode
        if iterations and mode == "cross":
            self.cross_iterations = iterations
        
        print(f"‚úì –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode}")
        if mode == "cross":
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {self.cross_iterations}")
    
    def handle_plan(self, task: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /plan —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –í–°–ï–• –º–æ–¥–µ–ª–µ–π"""
        print(f"\n‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏: {task}")
        print(f"üìä –†–µ–∂–∏–º: {self.current_mode}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.logger.log_prompt(task, self.current_mode, self.model_paths)
        
        if self.current_mode == "single":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å
            model_path = self.model_paths[0]
            self.llm_manager = LLMManager(model_path, self.config)
            if not self.llm_manager.initialize_llm():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å")
                return
            
            system_prompt = SystemDataCollector.generate_system_prompt(self.config)
            self.current_plan = self.llm_manager.generate_plan(system_prompt, task)
            self.llm_manager.unload_llm()
            
        elif self.current_mode == "multi":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï –º–æ–¥–µ–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {len(self.model_paths)} –º–æ–¥–µ–ª–µ–π –≤ multi-—Ä–µ–∂–∏–º–µ")
            multi_manager = MultiModelManager(self.model_paths, self.config)
            if not multi_manager.initialize_multiple_llms():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏")
                return
            
            system_prompt = SystemDataCollector.generate_system_prompt(self.config)
            full_prompt = f"{system_prompt}\n\nUser request: {task}\n\nAnswer (JSON):"
            
            responses = multi_manager.generate_multiple_responses(full_prompt)
            multi_manager.unload_multiple_llms()
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç (—Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É)
            best_response = None
            for model_name, response in responses.items():
                if "error" not in response and response.get('choices'):
                    text = response['choices'][0]['text']
                    if not best_response or len(text) > len(best_response):
                        best_response = text
                        print(f"‚úì –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
            
            if best_response:
                self.current_plan = PlanParser.parse_plan(best_response)
            else:
                print("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫–∏")
                self.current_plan = None
                
        elif self.current_mode == "cross":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–æ—Å—Å-–º—ã—à–ª–µ–Ω–∏–µ —Å–æ –í–°–ï–ú–ò –º–æ–¥–µ–ª—è–º–∏
            print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {len(self.model_paths)} –º–æ–¥–µ–ª–µ–π –≤ cross-—Ä–µ–∂–∏–º–µ")
            orchestrator = ModelOrchestrator(self.model_paths, self.config)
            system_prompt = SystemDataCollector.generate_system_prompt(self.config)
            full_prompt = f"{system_prompt}\n\nUser request: {task}\n\nAnswer (JSON):"
            
            result = orchestrator.llms_cross_thinking(full_prompt, iterations=self.cross_iterations)
            self.current_plan = PlanParser.parse_plan(result)
        
        if self.current_plan:
            print(f"‚úì –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω ({len(self.current_plan)} –¥–µ–π—Å—Ç–≤–∏–π)")
            self.show_plan(detailed=False)
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞–Ω
            self.logger.log_successful_plan(task, self.current_plan)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω")
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            self.logger.log_failed_plan(task)
    
    def show_plan(self, detailed: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω"""
        if not self.current_plan:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plan <task>")
            return
        
        if detailed:
            print("\nüìÑ –ü–ª–∞–Ω (JSON —Ñ–æ—Ä–º–∞—Ç):")
            print(json.dumps(self.current_plan, indent=2, ensure_ascii=False))
        else:
            print("\nüìã –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:")
            for i, action in enumerate(self.current_plan, 1):
                desc = action.get('description', 'No description')
                event = action.get('event', 'unknown')
                print(f"  {i}. [{event}] {desc}")
    
    def execute_plan(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞"""
        if not self.current_plan:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plan <task>")
            return
        
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω!")
        self.show_plan(detailed=False)
        
        confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (yes/no): ").strip().lower()
        if confirm != 'yes':
            print("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        print("\n‚ñ∂Ô∏è  –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞...\n")
        results = self.executor.execute_plan(self.current_plan)
        
        print("\n‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        success_count = sum(1 for r in results if r.get('success', False))
        print(f"  –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(results)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.logger.log_execution_result(
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            self.current_plan,
            results
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ verbose —Ä–µ–∂–∏–º–µ
        if self.config.verbose:
            for i, result in enumerate(results, 1):
                if not result.get('success', False):
                    print(f"  ‚ùå –î–µ–π—Å—Ç–≤–∏–µ {i} –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.get('error', 'Unknown error')}")


# ===========================================================================
# –ì–õ–ê–í–ù–´–ô –ú–û–î–£–õ–¨ (MAIN)
# ===========================================================================

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='AI PC Autopilot - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Linux',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument('-c', '--config', type=str, 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('-m', '--model', type=str,
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏')
    parser.add_argument('-d', '--models-dir', type=str,
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏')
    
    # –§–ª–∞–≥–∏ –¥–ª—è LLM –º–æ–¥—É–ª—è
    parser.add_argument('-f', '--full', action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--multi', type=int, metavar='N',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å N –º–æ–¥–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ')
    parser.add_argument('--cross-thinking', action='store_true',
                       help='–í–∫–ª—é—á–∏—Ç—å –∫—Ä–æ—Å—Å-–º—ã—à–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π')
    parser.add_argument('--iterations', type=int, default=2,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫—Ä–æ—Å—Å-–º—ã—à–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
    parser.add_argument('--interactive', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ')
    parser.add_argument('--task', type=str,
                       help='–ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏')
    parser.add_argument('--verbose', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--version', action='version',
                       version=f'AI PC Autopilot v{AppConfig.VERSION}')
    
    return parser.parse_args()


def select_models(config: AppConfig, args) -> List[str]:
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    models_dir = args.models_dir or config.models_dir
    scanner = ModelScanner(models_dir)
    available_models = scanner.scan_models()
    
    if not available_models:
        print(f"‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {models_dir}")
        return []
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    filtered_models = scanner.filter_models(
        available_models,
        config.model_whitelist,
        config.model_blacklist
    )
    
    if not filtered_models:
        print("‚ùå –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        return []
    
    print(f"\n‚úì –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(filtered_models)}")
    for i, model in enumerate(filtered_models, 1):
        print(f"  {i}. {os.path.basename(model)}")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–æ–≤
    if args.model:
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —É–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if os.path.exists(args.model):
            return [args.model]
        else:
            print(f"‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.model}")
            return []
    
    elif args.full:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        print("\nüì¶ –†–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        return filtered_models
    
    elif args.multi:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å N –º–æ–¥–µ–ª–µ–π
        n = min(args.multi, len(filtered_models))
        print(f"\nüì¶ –†–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {n} –º–æ–¥–µ–ª–µ–π")
        return filtered_models[:n]
    
    elif config.model_path and os.path.exists(config.model_path):
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        print(f"\nüì¶ –†–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
        return [config.model_path]
    
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å
        print(f"\nüì¶ –†–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        return [filtered_models[0]]


def interactive_mode(config: AppConfig, model_paths: List[str], args):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
    if not model_paths:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        return
    
    control = ControlModule(config, model_paths)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    if args.cross_thinking:
        control.change_mode("cross", args.iterations)
    elif args.multi and len(model_paths) > 1:
        control.change_mode("multi")
    
    print("\n" + "="*60)
    print("ü§ñ AI PC Autopilot - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    print("="*60)
    print("–í–≤–µ–¥–∏—Ç–µ /info –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    control.show_models()  # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏
    print("="*60 + "\n")
    
    while True:
        try:
            user_input = input(">>> ").strip()
            
            if not user_input:
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if user_input == "/exit" or user_input == "/quit":
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                break
            
            elif user_input == "/info":
                control.show_info()
            
            elif user_input.startswith("/info "):
                module_name = user_input.split(maxsplit=1)[1]
                control.show_info(module_name)
            
            elif user_input == "/models":
                control.show_models()
            
            elif user_input.startswith("/mode"):
                parts = user_input.split()
                if len(parts) == 1:
                    print(f"üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {control.current_mode}")
                    if control.current_mode == "cross":
                        print(f"   –ò—Ç–µ—Ä–∞—Ü–∏–π: {control.cross_iterations}")
                elif len(parts) >= 2:
                    mode = parts[1]
                    iterations = int(parts[2]) if len(parts) > 2 else None
                    control.change_mode(mode, iterations)
            
            elif user_input == "/logs":
                print("\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
                recent_logs = control.logger.get_recent_logs(limit=5)
                for log in recent_logs:
                    timestamp = log.get('timestamp', 'N/A')
                    log_type = log.get('type', 'unknown')
                    prompt_preview = log.get('prompt', '')[:50] + "..." if len(log.get('prompt', '')) > 50 else log.get('prompt', '')
                    print(f"  {timestamp} [{log_type}]: {prompt_preview}")
                    
            elif user_input.startswith("/logs "):
                log_type = user_input.split(maxsplit=1)[1]
                print(f"\nüìä –õ–æ–≥–∏ —Ç–∏–ø–∞ '{log_type}':")
                recent_logs = control.logger.get_recent_logs(log_type=log_type, limit=10)
                for log in recent_logs:
                    timestamp = log.get('timestamp', 'N/A')
                    prompt = log.get('prompt', 'N/A')
                    status = log.get('status', '')
                    print(f"  {timestamp} [{status}]: {prompt}")
            
            elif user_input.startswith("/plan "):
                task = user_input.split(maxsplit=1)[1]
                control.handle_plan(task)
            
            elif user_input == "/show":
                control.show_plan(detailed=False)
            
            elif user_input == "/show -d" or user_input == "/show --detailed":
                control.show_plan(detailed=True)
            
            elif user_input == "/execute":
                control.execute_plan()
            
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def direct_task_mode(config: AppConfig, model_paths: List[str], args):
    """–ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if not model_paths:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        return
    
    print(f"\n‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {args.task}")
    
    control = ControlModule(config, model_paths)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫ —Ä–µ–∂–∏–º—É
    if args.cross_thinking:
        control.change_mode("cross", args.iterations)
    elif args.multi and len(model_paths) > 1:
        control.change_mode("multi")
    
    print(f"üìä –†–µ–∂–∏–º: {control.current_mode}")
    
    control.handle_plan(args.task)
    
    if control.current_plan:
        control.show_plan(detailed=args.verbose)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–æ–ø–∞—Å–Ω–æ!)
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --interactive –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        
        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
        
        print("\n‚ñ∂Ô∏è  –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...\n")
        results = control.executor.execute_plan(control.current_plan)
        
        print("\n‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        success_count = sum(1 for r in results if r.get('success', False))
        print(f"  –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(results)}")
        
        if args.verbose:
            print("\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, result in enumerate(results, 1):
                print(f"\n  –î–µ–π—Å—Ç–≤–∏–µ {i}:")
                print(f"    –£—Å–ø–µ—Ö: {result.get('success', False)}")
                if result.get('stdout'):
                    print(f"    –í—ã–≤–æ–¥: {result['stdout'][:200]}")
                if result.get('stderr'):
                    print(f"    –û—à–∏–±–∫–∏: {result['stderr'][:200]}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("="*60)
    print("ü§ñ AI PC Autopilot - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö —á–µ—Ä–µ–∑ –ò–ò")
    print(f"   –í–µ—Ä—Å–∏—è: {AppConfig.VERSION}")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ llama-cpp-python
    if not LLAMA_AVAILABLE:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: llama-cpp-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install llama-cpp-python")
        return 1
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_arguments()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = AppConfig(args.config)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.verbose:
        config.verbose = True
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
    model_paths = select_models(config, args)
    
    if not model_paths:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print(f"  1. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {args.models_dir or config.models_dir}")
        print(f"  2. –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤: .gguf")
        print(f"  3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {args.config or 'config.json'}")
        return 1
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.task:
        # –ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        direct_task_mode(config, model_paths, args)
    elif args.interactive or not args.task:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        interactive_mode(config, model_paths, args)
    
    print("\n‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return 0


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if AppConfig().verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)